scalar GraphQLDate

type user {
  _id: ID!
  id: Int!
  name: String!
  email: String!
  phoneNumber:String!
  created: GraphQLDate!
  isOwnerOfEVCharger: Boolean!
}

type userCharger {
  _id: ID!
  id: Int!
  name: String!
  email: String!
  phoneNumber:String!
  created: GraphQLDate!
  isOwnerOfEVCharger: Boolean!
  addressOfPile: String
  lat: Float!
  lon: Float!
  price: Float
  availableTime: [String]
  availableTimeDisplay: [String]
  availableTimeTable: [[String]]
  startTime: Int
  endTime: Int
}

type Target {
    _id: ID!
    id: Int!
    address: String!
    lat: Float!
    lon: Float!
}

type userOrder {
  _id: ID!
  id: Int!
  name: String!
  email: String!
  phoneNumber:String!
  address: String!
  price: Float!
  time: String!
  cost: Float!
  created: GraphQLDate!
}

input TargetInputs {
  address: String!
  lat: Float!
  lon: Float!
}

input userChargerRegisterInput {
  name: String!,
  email: String!,
  phoneNumber:String!,
  password: String!,
  isOwnerOfEVCharger: Boolean!,
  addressOfPile: String!,
  price: Float!,
  startTime: Int!,
  endTime: Int!,
  lat: Float!,
  lon: Float!,
}

input userRegisterInput {
  name: String!,
  email: String!,
  phoneNumber:String!,
  password: String!,
  isOwnerOfEVCharger: Boolean!,
}

input userLoginInput {
  email: String,
  phoneNumber:String,
  password: String!,
}

input userOrderCheck {
  name: String!
  email: String!
  phoneNumber:String!
}

input comboInputs {
  id: Int!
  days_index: Int!
  selectedTime: String!
  duration: Int!
  name: String!
  email: String!
  phoneNumber:String!
  address: String!
  price: Float!
  time: String!
  cost: Float!
}

##### Top level declarations
type Query {
  about: String!
  getUser(userInput:userLoginInput!): user
  getUserCharger(userInput:userLoginInput!): userCharger
  resultTarget: Target!
  userChargerList: [userCharger!]!
  userOrderList(userInfo:userOrderCheck!): [userOrder!]!
}
type Mutation {
  setAboutMessage(message: String!): String
  registerNewUser(userInput: userRegisterInput!): user
  registerNewUserCharger(userChargerInput: userChargerRegisterInput!): userCharger
  targetAdd(target: TargetInputs!): Target!
  userTimeOrder(combo: comboInputs!): userCharger!
}
